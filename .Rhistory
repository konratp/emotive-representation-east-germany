#load packages
library(tidyverse)
library(tidytext)
library(corpus)
library(quanteda)
library(quanteda.sentiment)
library(quanteda.textplots)
library(readtext)
library(spacyr)
library(pradadata)
library(DT)
library(sandwich)
library(lmtest)
library(robustbase)
library(psych)
#load preprocessed and cleaned data frame
full_data <- read_csv("data/full_data.csv")
#subset only metadata
speeches_meta <- full_data %>%
select(-speechContent) %>%
mutate(docname = as.character(id))
#load sentiment dictionary
sentiment_dict <- read.delim("data/sentimerge.txt") %>%
rename(word = lemma) %>%
mutate(sentweight = sentiment * weight)
#convert sentiment dictionary to quanteda dictionary object
qtd_sentiment_dict <- sentiment_dict %>%
as.dictionary()
#define german stopwords
german_stopwords <- data.frame(word = stopwords("de"), stringsAsFactors = FALSE)
#tokenize full speeches
full_df <- full_data %>%
select(id, party, born_system, speechContent, year, politicianId, electoralTerm, born_gdr)
#unnest tokens
full_df <- unnest_tokens(tbl = full_df,
output = word,
input = speechContent)
#remove stopwords
full_df <- full_df %>%
anti_join(german_stopwords, by = c("word"))
#merge with sentiment dictionary and calculate average sentiments per speaker and electoral term
full_df <- inner_join(full_df,
sentiment_dict,
by = "word") %>%
group_by(id) %>%
mutate(avg_sentiment = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId) %>%
mutate(speaker_sent_full = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId, electoralTerm) %>%
mutate(speaker_session_sent = mean((sentiment * weight)))
#create vector of compound words for tokenization
compound_words <- c("Deutsche Demokratische Republik*", "Freie Deutsche Jugend*", "Arbeiter und Bauern Staat*", "Nationale Volksarmee*", "Schwester Agnes*", "Neue Länder*", "Neuen Ländern*", "Neue Bundesländer*", "der Osten*", "dem Osten*")
#create quanteda corpus
qtd_speeches_corp <- corpus(full_data,
docid_field = "id",
text_field = "speechContent")
#tokenize speeches
qtd_tokens <- tokens(qtd_speeches_corp,
remove_punct = TRUE,
remove_numbers = TRUE,
remove_symbols = TRUE,
padding = FALSE,
split_hyphens = TRUE,
include_docvars = TRUE) %>%
tokens_remove(stopwords("de"), padding = TRUE) %>%
tokens_compound(pattern = phrase(compound_words), concatenator = " ")
#define keywords
ddr_words <- c("DDR", "D.D.R.", "Deutsche Demokratische Republik", "SED", "S.E.D.", "Stasi", "Staatssicherheit", "MfS", "FDJ", "Freie Deutsche Jugend", "Arbeiter-und-Bauern-Staat", "Arbeiter und Bauern Staat", "Volkskammer", "Nationale Volksarmee", "NVA", "Zentralkomitee", "Volkspolizei")
#identify keywords-in-context
ddr_df <- kwic(qtd_tokens,
pattern = ddr_words,
valuetype = "fixed",
window = 5) #you can change the window parameter to add more/fewer words
#merge with metadata
ddr_df <- left_join(ddr_df, speeches_meta, by = "docname")
#join pre and post columns into one
ddr_df <- ddr_df %>%
as_tibble() %>%
unite(col = "merged",
pre, post,
sep = " ")
#tokenize in tidytext format
ddr_df <- unnest_tokens(tbl = ddr_df,
output = word,
input = merged)
#merge with sentiment dictionary, calculate legislator-session sentiment scores
ddr_df <- inner_join(ddr_df,
sentiment_dict,
by = "word") %>%
group_by(id) %>%
mutate(avg_sentiment = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId) %>%
mutate(speaker_sent_ddr = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId, electoralTerm) %>%
mutate(speaker_session_sent_ddr = mean((sentiment * weight)))
#define keywords
ostdeutschland_words <- c("Neue Bundesländer", "Neue Länder", "Neuen Ländern", "Ostdeutschland", "der Osten", "dem Osten", "Ossi", "Ossis")
#identify keywords-in-context
ostdeutschland_df <- kwic(qtd_tokens,
pattern = ostdeutschland_words,
valuetype = "fixed",
window = 5)
#merge with metadata
ostdeutschland_df <- left_join(ostdeutschland_df, speeches_meta, by = "docname")
#join pre and post columns into one
ostdeutschland_df <- ostdeutschland_df %>%
as_tibble() %>%
unite(col = "merged",
pre, post,
sep = " ")
#tokenize in tidytext format
ostdeutschland_df <- unnest_tokens(tbl = ostdeutschland_df,
output = word,
input = merged)
#merge with sentiment dictionary, calculate legislator-session sentiment scores
ostdeutschland_df <- inner_join(ostdeutschland_df,
sentiment_dict,
by = "word") %>%
group_by(id) %>%
mutate(avg_sentiment = mean((sentiment * weight)))%>%
ungroup() %>%
group_by(politicianId) %>%
mutate(speaker_sent_ostdeutschland = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId, electoralTerm) %>%
mutate(speaker_session_sent_ostdeutschland = mean((sentiment * weight)))
#define keywords
bundesland_words <- c("Brandenburg", "Thüringen", "Sachsen", "Anhalt", "Mecklenburg", "Vorpommern")
#identify keywords-in-context
bundesland_df <- kwic(qtd_tokens,
pattern = bundesland_words,
valuetype = "fixed",
window = 5)
#merge with metadata
bundesland_df <- left_join(bundesland_df, speeches_meta, by = "docname")
#join pre and post columns into one
bundesland_df <- bundesland_df %>%
as_tibble() %>%
unite(col = "merged",
pre, post,
sep = " ")
#tokenize in tidytext format
bundesland_df <- unnest_tokens(tbl = bundesland_df,
output = word,
input = merged)
#merge with sentiment dictionary, calculate legislator-session sentiment scores
bundesland_df <- inner_join(bundesland_df,
sentiment_dict,
by = "word") %>%
group_by(id) %>%
mutate(avg_sentiment = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId) %>%
mutate(speaker_sent_bundesland = mean((sentiment * weight))) %>%
ungroup() %>%
group_by(politicianId, electoralTerm) %>%
mutate(speaker_session_sent_bundesland = mean((sentiment * weight)))
#subset full data to include one row per mp-session
full_prejoin <- full_df %>%
unite(col = mp_session, electoralTerm, politicianId, sep = "_", remove = FALSE) %>%
select(politicianId, electoralTerm, speaker_session_sent, mp_session) %>%
distinct(mp_session, .keep_all = TRUE)
#regression using ddr sentiment subset
ddr_prejoin <- ddr_df %>%
unite(col = mp_session, electoralTerm, politicianId, sep = "_", remove = FALSE) %>%
select(politicianId, electoralTerm, speaker_session_sent_ddr, mp_session, party, born_system, born_gdr) %>%
distinct(mp_session, .keep_all = TRUE)
ddr_normed <- left_join(ddr_prejoin, full_prejoin, by = "mp_session")
ddr_normed[c("speaker_session_sent_ddr","speaker_session_sent")] <- lapply(ddr_normed[c("speaker_session_sent_ddr","speaker_session_sent")], function(x) c(scale(x)))
ddr_normed <- ddr_normed %>%
mutate(norm_sent = (speaker_session_sent_ddr - speaker_session_sent)) %>%
mutate(partygroup = case_when(party == "CDU/CSU" | party == "FDP" | party == "SPD" | party == "Bündnis 90/Die Grünen" ~ "Mainstream",
party == "AfD" ~ "AfD",
party == "PDS/Die Linke" ~ "PDS/Die Linke"))
partygroupx = fct_relevel(as.factor(ddr_normed$partygroup), "Mainstream", after = 0)
partyx = fct_relevel(as.factor(ddr_normed$party), "PDS/Die Linke", after = 0)
born_gdrx = fct_relevel(as.factor(ddr_normed$born_gdr), "Elsewhere", after = 0)
electoralTermx = as.factor(ddr_normed$electoralTerm.y)
#(heteroskedasticity-robust) linear regression model with party specification
model_pddr <- lm(norm_sent ~ partyx + born_gdrx + electoralTermx, data = ddr_normed)
model_pddr_sum <- summary(model_pddr)
model_pddr_robust_clustered <- coeftest(model_pddr,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#(heteroskedasticity-robust) linear regression model with partygroup specification
model_pgddr <- lm(norm_sent ~ partygroupx + born_gdrx + electoralTermx, data = ddr_normed)
model_pgddr_sum <- summary(model_pgddr)
model_pgddr_robust_clustered <- coeftest(model_pgddr,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#print regression outputs
model_pddr_robust_clustered
model_pgddr_robust_clustered
#regression using ostdeutschland sentiment subset
ostdeutschland_prejoin <- ostdeutschland_df %>%
unite(col = mp_session, electoralTerm, politicianId, sep = "_", remove = FALSE) %>%
select(politicianId, electoralTerm, speaker_session_sent_ostdeutschland, mp_session, party, born_gdr) %>%
distinct(mp_session, .keep_all = TRUE)
ostdeutschland_normed <- left_join(ostdeutschland_prejoin, full_prejoin, by = "mp_session")
ostdeutschland_normed[c("speaker_session_sent_ostdeutschland","speaker_session_sent")] <- lapply(ostdeutschland_normed[c("speaker_session_sent_ostdeutschland","speaker_session_sent")], function(x) c(scale(x)))
ostdeutschland_normed <- ostdeutschland_normed %>%
mutate(norm_sent = (speaker_session_sent_ostdeutschland - speaker_session_sent)) %>%
mutate(partygroup = case_when(party == "CDU/CSU" | party == "FDP" | party == "SPD" | party == "Bündnis 90/Die Grünen" ~ "Mainstream",
party == "AfD" ~ "AfD",
party == "PDS/Die Linke" ~ "PDS/Die Linke"))
partygroupx = fct_relevel(as.factor(ostdeutschland_normed$partygroup), "Mainstream", after = 0)
partyx = fct_relevel(as.factor(ostdeutschland_normed$party), "PDS/Die Linke", after = 0)
born_gdrx = fct_relevel(as.factor(ostdeutschland_normed$born_gdr), "Elsewhere", after = 0)
electoralTermx = as.factor(ostdeutschland_normed$electoralTerm.y)
##(heteroskedasticity-robust) linear regression model with party specification
model_postdeutschland <- lm(norm_sent ~ partyx + born_gdrx + electoralTermx, data = ostdeutschland_normed)
model_postdeutschland_sum <- summary(model_postdeutschland)
model_postdeutschland_robust_clustered <- coeftest(model_postdeutschland,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#(heteroskedasticity-robust) linear regression model with partygroup specification
model_pgostdeutschland <- lm(norm_sent ~ partygroupx + born_gdrx + electoralTermx, data = ostdeutschland_normed)
model_pgostdeutschland_sum <- summary(model_pgostdeutschland)
model_pgostdeutschland_robust_clustered <- coeftest(model_pgostdeutschland,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#print regression outputs
model_postdeutschland_robust_clustered
model_pgostdeutschland_robust_clustered
#regression using bundesland sentiment subset
bundesland_prejoin <- bundesland_df %>%
unite(col = mp_session, electoralTerm, politicianId, sep = "_", remove = FALSE) %>%
select(politicianId, electoralTerm, speaker_session_sent_bundesland, mp_session, party, born_gdr) %>%
distinct(mp_session, .keep_all = TRUE)
bundesland_normed <- left_join(bundesland_prejoin, full_prejoin, by = "mp_session")
bundesland_normed[c("speaker_session_sent_bundesland","speaker_session_sent")] <- lapply(bundesland_normed[c("speaker_session_sent_bundesland","speaker_session_sent")], function(x) c(scale(x)))
bundesland_normed <- bundesland_normed %>%
mutate(norm_sent = (speaker_session_sent_bundesland - speaker_session_sent)) %>%
mutate(partygroup = case_when(party == "CDU/CSU" | party == "FDP" | party == "SPD" | party == "Bündnis 90/Die Grünen" ~ "Mainstream",
party == "AfD" ~ "AfD",
party == "PDS/Die Linke" ~ "PDS/Die Linke"))
partygroupx = fct_relevel(as.factor(bundesland_normed$partygroup), "Mainstream", after = 0)
partyx = fct_relevel(as.factor(bundesland_normed$party), "PDS/Die Linke", after = 0)
born_systemx = fct_relevel(as.factor(bundesland_normed$born_system), "Reunified Germany", after = 0)
born_gdrx = fct_relevel(as.factor(bundesland_normed$born_gdr), "Elsewhere", after = 0)
electoralTermx = as.factor(bundesland_normed$electoralTerm.y)
#(heteroskedasticity-robust) linear regression model with party specification
model_pbundesland <- lm(norm_sent ~ partyx + born_gdrx + electoralTermx, data = bundesland_normed)
model_pbundesland_sum <- summary(model_pbundesland)
model_pbundesland_robust_clustered <- coeftest(model_pbundesland,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#(heteroskedasticity-robust) linear regression model with partygroup specification
model_pgbundesland <- lm(norm_sent ~ partygroupx + born_gdrx + electoralTermx, data = bundesland_normed)
model_pgbundesland_sum <- summary(model_pgbundesland)
model_pgbundesland_robust_clustered <- coeftest(model_pgbundesland,
vcov = vcovCL,
type = "HC1",
cluster = ~politicianId.x)
#print regression outputs
model_pbundesland_robust_clustered
model_pgbundesland_robust_clustered
#number of speeches by party
#ddr cluster
length(unique(ddr_df$id))
afdddr <- ddr_df[ddr_df$party == "AfD",]
length(unique(afdddr$id))
length(unique(afdddr$politicianId))
cduddr <- ddr_df[ddr_df$party == "CDU/CSU",]
length(unique(cduddr$id))
length(unique(cduddr$politicianId))
fdpddr <- ddr_df[ddr_df$party == "FDP",]
length(unique(fdpddr$id))
length(unique(fdpddr$politicianId))
spdddr <- ddr_df[ddr_df$party == "SPD",]
length(unique(spdddr$id))
length(unique(spdddr$politicianId))
grnddr <- ddr_df[ddr_df$party == "Bündnis 90/Die Grünen",]
length(unique(grnddr$id))
length(unique(grnddr$politicianId))
pdsddr <- ddr_df[ddr_df$party == "PDS/Die Linke",]
length(unique(pdsddr$id))
length(unique(pdsddr$politicianId))
#ostdeutschland cluster
length(unique(ostdeutschland_df$id))
afdodl <- ostdeutschland_df[ostdeutschland_df$party == "AfD",]
length(unique(afdodl$id))
length(unique(afdodl$politicianId))
cduodl <- ostdeutschland_df[ostdeutschland_df$party == "CDU/CSU",]
length(unique(cduodl$id))
length(unique(cduodl$politicianId))
fdpodl <- ostdeutschland_df[ostdeutschland_df$party == "FDP",]
length(unique(fdpodl$id))
length(unique(fdpodl$politicianId))
spdodl <- ostdeutschland_df[ostdeutschland_df$party == "SPD",]
length(unique(spdodl$id))
length(unique(spdodl$politicianId))
grnodl <- ostdeutschland_df[ostdeutschland_df$party == "Bündnis 90/Die Grünen",]
length(unique(grnodl$id))
length(unique(grnodl$politicianId))
pdsodl <- ostdeutschland_df[ostdeutschland_df$party == "PDS/Die Linke",]
length(unique(pdsodl$id))
length(unique(pdsodl$politicianId))
#bundesland cluster
length(unique(bundesland_df$id))
afdbundesland <- bundesland_df[bundesland_df$party == "AfD",]
length(unique(afdbundesland$id))
length(unique(afdbundesland$politicianId))
cdubundesland <- bundesland_df[bundesland_df$party == "CDU/CSU",]
length(unique(cdubundesland$id))
length(unique(cdubundesland$politicianId))
fdpbundesland <- bundesland_df[bundesland_df$party == "FDP",]
length(unique(fdpbundesland$id))
length(unique(fdpbundesland$politicianId))
spdbundesland <- bundesland_df[bundesland_df$party == "SPD",]
length(unique(spdbundesland$id))
length(unique(spdbundesland$politicianId))
grnbundesland <- bundesland_df[bundesland_df$party == "Bündnis 90/Die Grünen",]
length(unique(grnbundesland$id))
length(unique(grnbundesland$politicianId))
pdsbundesland <- bundesland_df[bundesland_df$party == "PDS/Die Linke",]
length(unique(pdsbundesland$id))
length(unique(pdsbundesland$politicianId))
#number of speeches by birthplace
#ddr cluster
length(unique(ddr_df$id))
gdrddr <- ddr_df[ddr_df$born_gdr == "GDR",]
length(unique(gdrddr$id))
length(unique(gdrddr$politicianId))
egddr <- ddr_df[ddr_df$born_gdr == "East Germany (not GDR)",]
length(unique(egddr$id))
length(unique(egddr$politicianId))
westddr <- ddr_df[ddr_df$born_gdr == "Elsewhere",]
length(unique(westddr$id))
length(unique(westddr$politicianId))
#ostdeutschland cluster
length(unique(ostdeutschland_df$id))
gdrodl <- ostdeutschland_df[ostdeutschland_df$born_gdr == "GDR",]
length(unique(gdrodl$id))
length(unique(gdrodl$politicianId))
egodl <- ostdeutschland_df[ostdeutschland_df$born_gdr == "East Germany (not GDR)",]
length(unique(egodl$id))
length(unique(egodl$politicianId))
westodl <- ostdeutschland_df[ostdeutschland_df$born_gdr == "Elsewhere",]
length(unique(westodl$id))
length(unique(westodl$politicianId))
#bundesland cluster
length(unique(bundesland_df$id))
gdrbundesland <- bundesland_df[bundesland_df$born_gdr == "GDR",]
length(unique(gdrbundesland$id))
length(unique(gdrbundesland$politicianId))
egbundesland <- bundesland_df[bundesland_df$born_gdr == "East Germany (not GDR)",]
length(unique(egbundesland$id))
length(unique(egbundesland$politicianId))
westbundesland <- bundesland_df[bundesland_df$born_gdr == "Elsewhere",]
length(unique(westbundesland$id))
length(unique(westbundesland$politicianId))
#distribution of relative sentiment by party and birthplace
#ddr cluster
length(ddr_normed$norm_sent)
summary(ddr_normed$norm_sent)
sd(ddr_normed$norm_sent)
describeBy(ddr_normed$norm_sent, ddr_normed$party)
describeBy(ddr_normed$norm_sent, ddr_normed$born_gdr)
#east germany cluster
length(ostdeutschland_normed$norm_sent)
summary(ostdeutschland_normed$norm_sent)
sd(ostdeutschland_normed$norm_sent)
describeBy(ostdeutschland_normed$norm_sent, ostdeutschland_normed$party)
describeBy(ostdeutschland_normed$norm_sent, ostdeutschland_normed$born_gdr)
#east german länder cluster
length(bundesland_normed$norm_sent)
summary(bundesland_normed$norm_sent)
sd(bundesland_normed$norm_sent)
describeBy(bundesland_normed$norm_sent, bundesland_normed$party)
describeBy(bundesland_normed$norm_sent, bundesland_normed$born_gdr)
